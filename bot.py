import logging
import asyncio
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup,
    ReplyKeyboardMarkup, KeyboardButton
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)
from config import BOT_TOKEN, ADMIN_IDS
from db import (
    add_order, get_orders, close_order,
    add_escrow, confirm_escrow,
    remove_old_orders
)

logging.basicConfig(level=logging.INFO)

# –ö–Ω–æ–ø–æ—á–Ω–æ–µ –º–µ–Ω—é
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [KeyboardButton("üì• –ö—É–ø–∏—Ç—å"), KeyboardButton("üì§ –ü—Ä–æ–¥–∞—Ç—å")],
        [KeyboardButton("üìÑ –í—Å–µ –∑–∞—è–≤–∫–∏")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üì• –ö—É–ø–∏—Ç—å":
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π /buy USDT 1000 Monobank 38.5")
    elif text == "üì§ –ü—Ä–æ–¥–∞—Ç—å":
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π /sell USDT 500 PrivatBank 39.2")
    elif text == "üìÑ –í—Å–µ –∑–∞—è–≤–∫–∏":
        await show_orders(update, context)

# –î–æ–±–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É
async def buy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    if len(args) < 4:
        await update.message.reply_text("–ü—Ä–∏–º–µ—Ä: /buy USDT 1000 Monobank 38.5")
        return
    user = update.effective_user
    add_order(user.username, user.id, "buy", args[0], float(args[1]), args[2], float(args[3]))
    await update.message.reply_text("‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∞")

async def sell(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    if len(args) < 4:
        await update.message.reply_text("–ü—Ä–∏–º–µ—Ä: /sell USDT 500 PrivatBank 38.5")
        return
    user = update.effective_user
    add_order(user.username, user.id, "sell", args[0], float(args[1]), args[2], float(args[3]))
    await update.message.reply_text("‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –¥–æ–±–∞–≤–ª–µ–Ω–∞")

# –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∑–∞—è–≤–∫–∏
async def show_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    orders = get_orders()
    if not orders:
        await update.message.reply_text("–ó–∞—è–≤–æ–∫ –Ω–µ—Ç.")
        return
    for o in orders:
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept:{o[0]}"),
                InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data=f"close:{o[0]}")
            ]
        ]
        markup = InlineKeyboardMarkup(keyboard)
        msg = f"#{o[0]} {o[3].upper()} {o[5]} {o[4]} —á–µ—Ä–µ–∑ {o[6]} –ø–æ {o[7]} –≥—Ä–Ω\nüë§ @{o[1]}"
        await update.message.reply_text(msg, reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user = query.from_user
    data = query.data

    if data.startswith("accept:"):
        order_id = int(data.split(":")[1])
        add_escrow(order_id, buyer_id=user.id, seller_id=None)
        await query.edit_message_text(f"üõ° –°–¥–µ–ª–∫–∞ #{order_id} –Ω–∞—á–∞—Ç–∞. –û–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.")

    elif data.startswith("close:"):
        order_id = int(data.split(":")[1])
        close_order(order_id)
        await query.edit_message_text(f"‚ùå –ó–∞—è–≤–∫–∞ #{order_id} –∑–∞–∫—Ä—ã—Ç–∞.")

# –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
async def admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await update.message.reply_text("üë®‚Äçüíº –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:\n- /clear_old ‚Äî —É–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫–∏ —Å—Ç–∞—Ä—à–µ 24—á\n- /orders ‚Äî –≤—Å–µ –∑–∞—è–≤–∫–∏")

async def clear_old(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        return
    remove_old_orders()
    await update.message.reply_text("üßπ –°—Ç–∞—Ä—ã–µ –∑–∞—è–≤–∫–∏ —É–¥–∞–ª–µ–Ω—ã.")

# –ó–∞–ø—É—Å–∫
app = ApplicationBuilder().token(BOT_TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("buy", buy))
app.add_handler(CommandHandler("sell", sell))
app.add_handler(CommandHandler("admin", admin))
app.add_handler(CommandHandler("clear_old", clear_old))
app.add_handler(CommandHandler("orders", show_orders))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_menu))
app.add_handler(CallbackQueryHandler(handle_callback))

# –§–æ–Ω–æ–≤–∞—è –æ—á–∏—Å—Ç–∫–∞
async def cleaner_callback(context: ContextTypes.DEFAULT_TYPE):
    remove_old_orders()

app.job_queue.run_repeating(cleaner_callback, interval=3600, first=10)
if __name__ == "__main__":
    app.run_polling()
